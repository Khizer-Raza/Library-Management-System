INCLUDE IRVINE32.inc
.DATA
msg1	 BYTE 0AH
		 BYTE	"************************************* ", 0dh, 0ah
		 BYTE	"WELCOME TO LIBRARY MANAGEMENT SYSTEM  ", 0dh, 0ah
		 BYTE	"1 TO Register a Member", 0dh, 0ah
		 BYTE	"2 TO View Members", 0dh, 0ah
		 BYTE	"3 TO View Members From File", 0dh, 0ah
		 BYTE	"4 TO Add Book", 0dh, 0ah
		 BYTE	"5 TO View Available Books", 0dh, 0ah
		 BYTE	"6 TO View All The Books Including Issued Ones", 0dh, 0ah
		 BYTE	"7 TO Register/Issue a book", 0dh, 0ah
		 BYTE   "8 TO Return A BOOK ", 0dh, 0ah
		 BYTE	"9 TO Exit Program", 0dh, 0ah
		 BYTE	"	Choose Your Option : ", 0
		 BYTE	"************************************* ", 0dh, 0ah
COPY_MEMBERS DWORD 0
RETURN_BOOK_NAME BYTE "THE BOOK YOU ISSUED WAS ",0
RETURN_MEMBER_NAME DB 40 DUP (?) 
RETURN_BOOK_MSG BYTE "ENTER MEMBER NAME TO RETURN BOOK OF ",0
EMPTY_STRING DB "    ",0
SUCCESSFULL BYTE "SUCCESSFULLY ISSUED BOOK FOR YOU ",0
RETURN_BOOK_SUCCESSFULL BYTE "SUCCESSFULL RETURNED THE BOOK ",0
COPIED_TO_RESTORE DB 40 DUP (?)
NOTHING_TO_SHOW BYTE " LIST IS EMPTY NOTHING TO SHOW ",0
BOOK_AVAILABLE byte "ENTER BOOK NAME TO REGISTER ",0
DOES_NOT_EXIST BYTE " BOOK WITH THIS NAME IS NOT AVAILABLE ",0
BOOK_REGISTERATION_MSG BYTE " ENTER MEMBER NAME TO REGISTER BOOK ON HIS/HER BEHALF ",0
ALREADY_ISSUED BYTE " ONE BOOK IS ALREADY ISSUED RETURN IT BACK TO ISSUE OTHER ",0
REG_MSG	 BYTE "	Enter Member's Name For Registration: ",0
VIEW_MEMBERS_MSG BYTE 0Ah,"	Displaying Registered Members: ",0AH, 0DH, 0
ADD_MSG			 BYTE "Enter Book Name & Author Name to Add: ",0
VIEW_BOOKS_MSG BYTE 0Ah, "Viewing Books in Library: ",  0dh, 0ah, 0
VIEW_BOOKS_MSG2 BYTE 0AH, "Viewing All Books of Library(Including Issued Once): ",0dh,0ah,0
EXIT_MSG	   BYTE 0AH,
				    "Exiting Program...",0
bool		   DWORD ?
MEMBERS_FILE   BYTE "MEMBERS.txt",0
BOOKS_FILE     BYTE "BOOKS.txt",0
fileHandle HANDLE ?
fileHandle2 HANDLE ?
fileHandle3 HANDLE ?
NL BYTE 0Dh, 0Ah, 0
CURRENTSIZE DWORD ?

BUFFER_SIZE=5000
buffer_mem   BYTE 5000 DUP (?)
buffer_book  BYTE 5000 DUP (?)
bytesRead dword 0
REGISTER	 DWORD 1
VIEW_MEMBERS DWORD 2
VIEW_MF		 DWORD 3
ADD_BOOK	 DWORD 4
VIEW_BOOKS	 DWORD 5
VIEW_BF		 DWORD 6
ISSUE_B      DWORD 7
RETURN_B     DWORD 8
EXITP		 DWORD 9	
MEMBER_SIZE = 40
MEMBER1 DB MEMBER_SIZE DUP (?)
MEMBER2 DB MEMBER_SIZE DUP (?)
MEMBER3 DB MEMBER_SIZE DUP (?)
MEMBER4 DB MEMBER_SIZE DUP (?)
MEMBER5 DB MEMBER_SIZE DUP (?)
MEMBER6 DB MEMBER_SIZE DUP (?)
MEMBER7 DB MEMBER_SIZE DUP (?)
MEMBER8 DB MEMBER_SIZE DUP (?)
MEMBER9 DB MEMBER_SIZE DUP (?)
MEMBER10 DB MEMBER_SIZE DUP (?)
NUM_MEMBERS DWORD 0
MEMBERS DD MEMBER1, MEMBER2, MEMBER3, MEMBER4, MEMBER5, MEMBER6,MEMBER7,MEMBER8,MEMBER9,MEMBER10, 0AH, 0DH, 0

BOOK_SIZE = 30
BOOK1 DB BOOK_SIZE DUP (?)
BOOK2 DB BOOK_SIZE DUP (?)
BOOK3 DB BOOK_SIZE DUP (?)
BOOK4 DB BOOK_SIZE DUP (?)
BOOK5 DB BOOK_SIZE DUP (?)
BOOK6 DB BOOK_SIZE DUP (?)
BOOK7 DB BOOK_SIZE DUP (?)
BOOK8 DB BOOK_SIZE DUP (?)
BOOK9 DB BOOK_SIZE DUP (?)
BOOK10 DB BOOK_SIZE DUP (?)
NUM_BOOKS DWORD 0
BOOKS DD BOOK1, BOOK2, BOOK3, BOOK4, BOOK5, BOOK6, BOOK7, BOOK8, BOOK9, BOOK10, 0AH, 0DH, 0

REGISTERED_BOOK DD BOOK1, BOOK2, BOOK3, BOOK4, BOOK5, BOOK6, BOOK7, BOOK8, BOOK9, BOOK10, 0AH, 0DH, 0

IS_REGISTEREED dword 6 DUP(0)
index dword 0
INDEX2 DWORD 0
MEMBER_TO_REGISTER DB 40 DUP(?) 
BOOK_TO_REGISTER DB 30 DUP(?)

.CODE

STRING_INPUT proto, var1: PTR DWORD

MENU PROC
		MOV EDX,OFFSET MSG1
		CALL WRITESTRING
		CALL READDEC	

		CMP EAX, REGISTER
		JE REG_M		
		CMP EAX, VIEW_MEMBERS
		JE VIEW_M		
		CMP EAX, VIEW_MF
		JE VIEW_MFILE 
		CMP EAX, ADD_BOOK
		JE ADD_B		
		CMP EAX, VIEW_BOOKS
		JE VIEW_B		
		CMP EAX, VIEW_BF
		JE VIEW_BFILE
		CMP EAX, ISSUE_B
		JE ISSUE_BOOK
		CMP EAX, RETURN_B
		JE RETURN_BOOK
		JMP EXIT_MENU
ret
MENU ENDP

main PROC
		
		CALL MENU

;REGISTER MEMBERS
	REG_M::
		MOV EDX,OFFSET REG_MSG
		CALL WRITESTRING
	
		mov edx, OFFSET MEMBERS_FILE
		invoke CreateFile, edx, FILE_APPEND_DATA, 0, 0, OPEN_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0
		mov fileHandle2, eax

		MOV ESI, OFFSET MEMBERS
		MOV EAX, MEMBER_SIZE
		MUL NUM_MEMBERS
		ADD ESI, EAX
		MOV EDX, ESI
		MOV ECX,MEMBER_SIZE
		CALL READSTRING
		mov CURRENTSIZE,eax
		INC NUM_MEMBERS
		push NUM_MEMBERS
		POP COPY_MEMBERS

		mov ecx, CURRENTSIZE
		invoke WriteFile, fileHandle2, edx, ecx, ADDR bytesRead, 0

		mov edx, OFFSET NL
		mov ecx,sizeof NL-1
		invoke WriteFile, fileHandle2, edx, ecx, ADDR bytesRead, 0
		invoke CloseHandle, fileHandle

		CALL WAITMSG
		CALL CLRSCR
		CALL MENU
;VIEW MEMBERS
	VIEW_M::
		MOV EDX,OFFSET VIEW_MEMBERS_MSG
		CALL WRITESTRING
	
		MOV ECX, NUM_MEMBERS
		cmp ECX, 0
		JE MENU
		MOV EBX, 0
	OUTPUT:
		MOV ESI,OFFSET MEMBERS
		MOV EAX, MEMBER_SIZE
		MUL EBX
		ADD ESI, Eax
		MOV EDX, ESI
		CALL WRITESTRING
		INC EBX
		CALL CRLF
	LOOP OUTPUT
	
	CALL WAITMSG
	CALL CLRSCR
	CALL MENU

; VIEW MEMBERS FROM FILE
	VIEW_MFILE::
		MOV EDX,OFFSET VIEW_MEMBERS_MSG
		CALL WRITESTRING
		INVOKE CreateFile,ADDR MEMBERS_FILE, GENERIC_READ, DO_NOT_SHARE, NULL, OPEN_ALWAYS, FILE_ATTRIBUTE_NORMAL, 	0 
		mov filehandle, eax 
		invoke SetFilePointer, filehandle, 0, 0, FILE_BEGIN
		invoke ReadFile,filehandle, addr BUFFER_MEM, BUFFER_SIZE, addr bytesRead, 0
		invoke CloseHandle, filehandle
		mov edx, offset BUFFER_MEM 
		call WriteString

		CALL WAITMSG
		CALL CLRSCR
		CALL MENU

	ADD_B::
		mov edx, OFFSET BOOKS_FILE
		invoke CreateFile, edx, FILE_APPEND_DATA, 0, 0, OPEN_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0
		mov fileHandle, eax
		
		MOV EDX,OFFSET ADD_MSG
		CALL WRITESTRING
		MOV ESI, OFFSET BOOKS
		MOV EAX, BOOK_SIZE
		MUL NUM_BOOKS
		ADD ESI, EAX
		MOV EDX, ESI
		MOV ECX, BOOK_SIZE
		CALL READSTRING
		mov CURRENTSIZE,eax
		INC NUM_BOOKS
		
		mov ecx, CURRENTSIZE
		invoke WriteFile, fileHandle, edx, ecx, ADDR bytesRead, 0
		
		mov edx, OFFSET NL
		mov ecx,sizeof NL-1
		invoke WriteFile, fileHandle, edx, ecx, ADDR bytesRead, 0
		invoke CloseHandle, fileHandle
		
		CALL WAITMSG
		CALL CLRSCR
		CALL MENU

	VIEW_B::
		MOV EDX,OFFSET VIEW_BOOKS_MSG
		CALL WRITESTRING
		MOV ECX, NUM_BOOKS
		cmp ECX, 0
		JNE JUMPED
		MOV EDX,OFFSET NOTHING_TO_SHOW
		CALL WRITESTRING
	JUMPED:
		CALL WAITMSG
		CALL CLRSCR
		JE MENU
		MOV EBX, 0
	OUTPUTB:
		MOV ESI, OFFSET BOOKS
		MOV EAX, BOOK_SIZE
		MUL EBX
		ADD ESI, Eax
		MOV EDX, ESI
		CALL WRITESTRING
		INC EBX
		CALL CRLF
	LOOP OUTPUTB

	CALL WAITMSG
	CALL CLRSCR
	CALL MENU

; VIEW BOOKS FROM FILE
	VIEW_BFILE::
		MOV EDX,OFFSET VIEW_BOOKS_MSG2
		CALL WRITESTRING
		INVOKE CreateFile,ADDR BOOKS_FILE, GENERIC_READ, DO_NOT_SHARE, NULL, OPEN_ALWAYS,FILE_ATTRIBUTE_NORMAL,0 
		mov filehandle, eax 
		invoke ReadFile,filehandle, addr BUFFER_BOOK, BUFFER_SIZE, addr bytesRead,0
		invoke CloseHandle,	filehandle
		mov edx, offset BUFFER_BOOK 
		call WriteString

		CALL WAITMSG
		CALL CLRSCR
		CALL MENU

	ISSUE_BOOK::
		MOV EDX,OFFSET BOOK_REGISTERATION_MSG
		CALL WRITESTRING
		CALL CRLF
		MOV ECX,MEMBER_SIZE
		MOV EDX,OFFSET MEMBER_TO_REGISTER
		CALL READSTRING
		mov edi,edx
		MOV ECX, NUM_MEMBERS
		
		CALL WAITMSG
		CALL CLRSCR
		cmp ECX, 0
		CALL MENU
		MOV EBX, 0

	OUTPUTA:
		MOV ESI,OFFSET MEMBERS
		MOV EAX, MEMBER_SIZE
		MUL EBX
		ADD ESI,Eax
		invoke str_compare, esi,addr MEMBER_TO_REGISTER
		cmp eax,0
		jnz l
		MOV esi,INDEX
		mov eax,IS_REGISTEREED[esi]
		Cmp eax,0
		je jump
		mov edx,offset ALREADY_ISSUED
		call WriteString

		CALL WAITMSG
		CALL CLRSCR
		CALL MENU
	jump:
		mov edx,offset BOOK_AVAILABLE
		CALL WRITESTRING
		mov ecx,BOOK_SIZE
		mov edx,offset BOOK_TO_REGISTER
		call ReadString
		CALL WAITMSG
		CALL CLRSCR
		cmp ECX, 0
		JE MENU
		PUSH EBX
		MOV EBX, 0
	OUTPUTC:
		MOV ESI,OFFSET BOOKS
		MOV EAX,BOOK_SIZE
		MUL EBX
		ADD ESI,Eax
		INVOKE str_compare,esi,addr BOOK_TO_REGISTER
		CMP EAX,0
		JNZ L2
		MOV ESI,INDEX2
		invoke str_copy,addr BOOKS[ESI],ADDR COPIED_TO_RESTORE
		invoke str_copy ,addr EMPTY_STRING,addr BOOKS[ESI]
		mov edx,offset SUCCESSFULL
		call WriteString
		Mov IS_REGISTEREED[esi],1

		;CALL WAITMSG
		;CALL CLRSCR
		CALL MENU
		
		L2:
			MOV EDX,OFFSET DOES_NOT_EXIST
			CALL WRITESTRING
		x:
			;CALL CLRSCR
			CALL MENU
			INC EBX
			add index,4
			CALL CRLF
	LOOP OUTPUTC

	pop ebx
	
	l:
		INC EBX
		add index,4
		JMP x

	RETURN_BOOK::
		MOV EDX,OFFSET RETURN_BOOK_MSG
		CALL WRITESTRING
		MOV ECX, MEMBER_SIZE
		MOV EDX,OFFSET RETURN_MEMBER_NAME
		CALL READSTRING
		MOV ECX, COPY_MEMBERS
		CALL WAITMSG
		CALL CLRSCR
		cmp ECX, 0
		Jz MENU
		MOV EBX, 0
	forOUTPUT:
		MOV ESI,OFFSET MEMBERS
		MOV EAX, MEMBER_SIZE
		MUL EBX
		ADD ESI, Eax
		invoke str_compare, esi,addr RETURN_MEMBER_NAME
		cmp eax,0
		jnz jumpedForSearchMore
		MOV EDX,OFFSET RETURN_BOOK_NAME
		CALL WRITESTRING
		MOV EDX,OFFSET COPIED_TO_RESTORE
		CALL WRITESTRING
		MOV ESI,INDEX
		INVOKE STR_COPY , EDX,ADDR BOOKS[ESI]
		CALL CRLF
		MOV EDX,OFFSET RETURN_BOOK_SUCCESSFULL
		CALL WRITESTRING
		CALL WAITMSG
		CALL CLRSCR
		CALL MENU
		
		jumpedForSearchMore :
			mov al,'n'
			call WriteChar
			INC EBX
			CALL CRLF
	LOOP forOUTPUT
	
	CALL WAITMSG
	CALL CLRSCR
	CALL MENU
	
	EXIT_MENU::
		MOV EDX,OFFSET EXIT_MSG
		CALL WRITESTRING
Exit
main endp

end main